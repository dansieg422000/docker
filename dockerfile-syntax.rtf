FROM - must be the first command in your Dockerfile
Sample: FROM java:8

MAINTAINER - defines the author of this Dockerfile
Sample: MAINTAINER Firstname Lastname <email@yahoo.com>

RUN - runs the command line, waits for it to finish and saves the result
Sample - RUN unzip install.zip /opt/install
                RUN echo hello docker

ADD - adds a local files, adds the contents of tar archives, works with URLs as well
Sample - ADD run.sh /run.sh
               ADD project.tar.gz /install/
                ADD https://project.example.com/download/project.rpm /project/


ENV - sets the environment variables both during the build and when running the result
Sample - ENV DB_HOST=db.production.example.com
                ENV DB_PORT=5432

ENTRYPOINT - specifies the start of the command to run, if your container acts like a command-line program, you can use ENTRYPOINT
Sample -

CMD - specifies the whole command to run
Sample -

Shell Form VS Exec Form
- ENTRYPOINT RUN and CMD can use either form

Shell Form
Sample - nano notes.txt

Exec Form
Sample - [“/bin/nano”, “notes.txt”]

EXPOSE
Sample - EXPOSE 8080
                -p 1234:1234

VOLUME - defines shared or ephemeral volumes, avoid defining shared folders in Dockerfiles
Sample - VOLUME [“/host/path/”, “/container/path/”]
               VOLUME [“/shared-data”]

WORKDIR - sets the directory the container starts in
Sample - WORKDIR /install/

USER - sets which user the container will run as
Sample - USER user1
                USER 1000

Reference: https://docs.docker.com/engine/reference/builder/





