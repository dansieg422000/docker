{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15240\viewh9520\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \CocoaLigature0 \'97 Sample docker networking : One way communication \'97 (open 3 terminal)\
Terminal 1:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3  docker run --rm -ti -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash    - explicitly define an outside port\
 docker run --rm -ti -p 45678 -p 45679 --name echo-server ubuntu:14.04 bash                - implicit define an outside port\
 docker port echo-server                                                                   - to check the port\
 nc -lp 45678 | nc -lp 45679   (1st nc -lp 45678 = Terminal 1 can send to Terminal 2 but cannot received from Terminal 2) \
                               (2nd nc -lp 45679 = Terminal 2 can send to Terminal 1 but cannot received from Terminal 1)               	                                           \
Terminal 2:\
 nc localhost 45678\
Terminal 3:\
 nc localhost 45679\
\
\'97 How to make links not break \'97\
docker network create network-name		                                                 - private networks\
\
-- Sample network : Two way communication \'97\
Terminal 1\
 docker network create example-network		                                                 - create a private network named example-network\
 docker run \'97-rm -ti -\'97net=example-network \'97-name server ubuntu:14.04 bash                     - run the example-network\
 nc -lp 1234									                                             - listen the example-network to port 1234\
\
Terminal 2\
 docker run -\'97rm -ti \'97-link server \'97-net=example \'97-name client ubuntu:14.04 bash            - client of example-network\
 nc server 1234				                                                              - listen to port 1234\
\
\'97- IP Address Binding in Your Services \'97-\
 docker run -p 127.0.0.1:1234:1234/tcp	                              - to allow connections, you need to use the bind address \'930.0.0.0\'94 inside the container  \
            \
\'97- Volumes: virtual disc to store and share data (Persistent - permanent, Ephemeral - not permanent) \'97-\
   Note: This is useful for creating Virtual Machine\
1. Create a file or folder\
  mkdir sample-folder\
\
2. docker run -ti -v /Users/ronaldolay/docker-sample-folder:/shared-folder ubuntu:14.04 bash\
   docker run -ti -v  (docker command)\
   /Users/ronaldolay/docker-sample-folder:/shared-folder  (full path of the folder or files that will be share)\
   ubuntu:14.04 (docker image)\
\
3. To create a file (inside docker container)\
   ls /shared-folder\
   cd shared-folder\
   touch my-date (once inside the container, create a sample file)\
\
4. To check (exit the container)\
   go the the folder that is shared to the container (docker-sample-folder)\
\
\'97 Sharing Data between containers (Open 2 terminal)\'97 \
Terminal 1: \
 docker run -ti -v /shared-data ubuntu:14.04 bash\
 echo hello > /shared-data/data-file   (will create a file data-file and write hello)\
\
Terminal 2: \
 docker run -ti \'97volumes-from name-of-the-container ubuntu:14.04 bash\
 echo welcome > /shared-data/new-file\
\
\
\'97- For pulling an image (need to login first to docker hub) \'97-\
 docker pull php\
\
\
\
\
}